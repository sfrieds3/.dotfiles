# makes tmux send out the proper escape codes for setting the terminal title
set-option -g set-titles on
# sets the content of the title: user@host: /current/working/directory
set-option -g set-titles-string "#(whoami)@#H: #{pane_current_path}"

# pane options
set-option -g pane-border-status bottom
# set-option -g pane-border-format " #P:#{pane_current_command} "
set-option -g pane-border-format ""
set-option -g pane-border-style fg=white,dim
set-option -g pane-active-border-style fg=white
set-option -g pane-border-lines heavy

if-shell 'uname | grep -q Darwin' \
  'set-option -g default-shell /opt/homebrew/bin/zsh' \
  'set-option -g default-shell /usr/bin/zsh'

# allow user var passthrough
set -g allow-passthrough on

# tmux list-keys
# rebind prefix
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# support more complex key combinations
set-option -w -g xterm-keys on

# make esc work in vim
set-option -s escape-time 0

# make tmux work better with vim colors
set-option -s default-terminal "tmux-256color"
set-option -sa terminal-features ",xterm-*:RGB"

# enable mouse support
set-option -g mouse on

# allow focus-events
set-option -g focus-events on

# stay in copy mode after selection
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# use vim keys
set-window-option -g mode-keys vi

# use emacs keys in command mode
set-option -g status-keys emacs

# aggressive resize - do not limit window size
set-window-option -g aggressive-resize on

# auto rename windows
set-window-option -g automatic-rename on
# and do so based on the pwd
set-window-option -g automatic-rename-format '#{b:pane_current_path}'

# refresh pane name, 'status-left', and 'staus-right' more often
set-option -g status-interval 1

# display messages for 5 seconds
set-option -g display-time 5000

# larger history
set-option -g history-limit 1000000

# panes
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g renumber-windows on

# add some additional word separator characters
# default: !\"#$%&'()*+,-./:;<=>?@[\\]^`{|}~
set-option -g word-separators " -_@:/"

set-environment -g SHLVL 1

### keymaps ###

# navigate between prompts
bind-key o {
  copy-mode -H
  send-keys -X previous-prompt
}
bind-key -T copy-mode-vi -r o {
  send-keys -X previous-prompt
}
bind-key i {
  copy-mode -H
  send-keys -X next-prompt
}
bind-key -T copy-mode-vi -r i {
  send-keys -X next-prompt
}

# go to last window
bind-key M-Space last-window

# set up copy/paste
bind-key P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi M-C send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# use esc to quit copy mode
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind-key -T copy-mode-vi WheelUpPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-up
}
bind-key -T copy-mode-vi WheelDownPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-down
}

# Turn on incremental search in vi mode (it's already the default in emacs mode).
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
  send-keys -X search-backward-incremental "%%"
}

# Make "/" and "?" work without going into copy mode first.
bind-key / {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
    send-keys -X search-forward-incremental "%%"
  }
}
bind-key ? {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
    send-keys -X search-backward-incremental "%%"
  }
}

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind-key -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-word
  }
bind-key -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-line
  }

# open new windows and panes in current directory
bind-key c new-window -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"

# use vim keys for splits and changing panes
bind-key ^ last-window
bind-key -n M-h select-pane -L
bind-key -n M-l select-pane -R
bind-key -n M-k select-pane -U
bind-key -n M-j select-pane -D
bind-key -n M-L next-window
bind-key -n M-H previous-window
# direct window access
bind-key -n M-1 select-window -t :=1
bind-key -n M-2 select-window -t :=2
bind-key -n M-3 select-window -t :=3
bind-key -n M-4 select-window -t :=4
bind-key -n M-5 select-window -t :=5
bind-key -n M-6 select-window -t :=6
bind-key -n M-7 select-window -t :=7
bind-key -n M-8 select-window -t :=8
bind-key -n M-9 select-window -t :=9
bind-key -n M-0 select-window -t :=0

# kill pane
bind-key -n M-X kill-pane

# quick new sessions
bind-key M-c new-session
bind-key h display-popup -E -w 75% -h 75% "htop"
# bind-key -n M-g display-popup -E "tmux new-session -A -s scratch"
bind-key M-t display-popup -E -w 75% -h 75% "nvim ~/todo.md"
# bind-key P display-popup -E "ipython || python3"
# bind-key -n M-c display-popup -E "bc"

# session management
bind-key e choose-tree -swZ
# bind-key C-j new-window -n "session-switcher" "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t" -N 'session jumper'

# source tmux conf file (the right way)
bind-key R run-shell ' \
        tmux source-file ~/.config/tmux/tmux.conf > /dev/null; \
        tmux display-message "Sourced ~/.config/tmux/.tmux.conf!"'

# fzf switch session
# show all (attached and not attached)
bind-key C-j display-popup -E "\
    tmux list-sessions -F '#{?session_attached,#{session_name} (attached),#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\
    awk '{print $1}' |\
    xargs -I {} tmux switch-client -t {}"

bind-key -n M-q display-popup -E "\
    tmux list-sessions -F '#{?session_attached,#{session_name} (attached),#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\
    awk '{print $1}' |\
    xargs -I {} tmux switch-client -t {}"

# fzf kill sessions
bind-key K display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse -m --header=kill-session --preview 'tmux capture-pane -pt {}' |\
    xargs -I {} tmux kill-session -t {}"

# Prompted join/break-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
bind-key B "display-panes; command-prompt -p 'break pane #: ' 'break-pane -d -s %%'"

# window and client mappings
bind-key -n M-p select-window -p
bind-key -n M-n select-window -n
bind-key -n M-o select-window -l
bind-key -n M-P switch-client -p
bind-key -n M-N switch-client -n
bind-key -n M-O switch-client -l

# list keybindings
bind-key -n M-? list-keys

# switch panes
bind-key C-p display-panes -d 0

# mark and swap panes
bind-key -n M-m select-pane -m # mark
bind-key -n M-M select-pane -M # unmark

# BEGIN M-<Space> key table
# -n is alias for -T root
# use switch-client -T <table> to switch to custom key table
bind-key -n M-Space switch-client -T mtable

bind-key -T mtable , swap-pane
bind-key -T mtable . join-pane

# new session
bind-key -T mtable M-c new-session
bind-key -T mtable M-d detach-client

# new/split window while staying in current window
bind-key -T mtable c new-window -d -c "#{pane_current_path}"
bind-key -T mtable '"' split-window -vd -c "#{pane_current_path}"
bind-key -T mtable % split-window -hd -c "#{pane_current_path}"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key -T mtable M-s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# show splits and sessions
bind-key -T mtable s choose-tree
bind-key -T mtable S choose-session

# windows and layouts
bind-key -T mtable -n M-S split-window
bind-key -T mtable -n M-a select-layout main-vertical
bind-key -T mtable -n M-A select-layout main-horizontal

# move window left and right
bind-key -T mtable -n p swap-window -t -1\; select-window -t -1
bind-key -T mtable -n n swap-window -t +1\; select-window -t +1

# END M-<Space> key table

# BEGIN smart-splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'

bind-key -n M-H if-shell "$is_vim" 'send-keys M-H' 'resize-pane -L 3'
bind-key -n M-J if-shell "$is_vim" 'send-keys M-J' 'resize-pane -D 3'
bind-key -n M-K if-shell "$is_vim" 'send-keys M-K' 'resize-pane -U 3'
bind-key -n M-L if-shell "$is_vim" 'send-keys M-L' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l
# END vim-smart-splits

# statusline
source-file $XDG_CONFIG_HOME/tmux/tmux.statusline

# source tmux.local files
source-file -q $XDG_CONFIG_HOME/tmux/tmux.local
source-file -q $HOME/tmux.local

# plugins

# Resurrect tmux sessions
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'

# thumbs
# <space>
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @thumbs-command 'echo -n {} | pbcopy'
set -g @thumbs-fg-color yellow
set -g @thumbs-hint-fg-color red

# extrakto
# <tab>
set -g @plugin 'laktak/extrakto'

# prefix + I to install plugins
run '$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm'
